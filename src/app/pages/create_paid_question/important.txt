"use client";
import React, { useState, useEffect, useRef } from "react";
import { ArrowLeft, Plus, Trash2, X } from "lucide-react";
import { motion } from "framer-motion";
import styles from "./quizcreationpage.module.css";
import PreviewQuizPage from "./previewquestion";
import { useRouter } from "next/navigation";
import { useAccount } from "wagmi";
import { getDatabase, database, ref, set, push } from "@/config/FirebaseConfig";
import { useActiveAccount } from "thirdweb/react";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { GoogleGenerativeAI } from "@google/generative-ai";

//every line matter be carefull

// Function to generate a random 5-character quiz code
//please leave it as it is most of the code logic affect other part of the game
const generateQuizCode = () => {
  let quizCode = "TBP";
  const characters = "ABCDEF1234567890";
  for (let i = 0; i < 5; i++) {
    const randomIndex = Math.floor(Math.random() * characters.length);
    quizCode += characters[randomIndex];
  }
  return quizCode;
};
const STORAGE_KEY = "quiz_draft";
const LAST_GENERATION_KEY = "last_ai_generation";
const COOLDOWN_PERIOD = 60000;

const QuizCreationPage = () => {
  const { address: useraddress } = useAccount();
  const account = useActiveAccount();
  const router = useRouter();
  const [title, setTitle] = useState("");
  const [questions, setQuestions] = useState([
    { id: 1, text: "", options: ["", "", "", ""], correctAnswer: null },
  ]);
  const [activeQuestion, setActiveQuestion] = useState(1);
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [isPreviewMode, setIsPreviewMode] = useState(false); // State to handle preview
  const [loading, setLoading] = useState(false);

  const [isAutoGenModalOpen, setIsAutoGenModalOpen] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);

  const openAutoGenModal = () => setIsAutoGenModalOpen(true);
  const closeAutoGenModal = () => setIsAutoGenModalOpen(false);

  const retrieveGeneratedQuestions = () => {
    const savedDraft = localStorage.getItem(STORAGE_KEY);
    if (savedDraft) {
      try {
        const parsedDraft = JSON.parse(savedDraft);
        if (
          parsedDraft &&
          parsedDraft.savedQuestions &&
          parsedDraft.savedTitle
        ) {
          setQuestions(parsedDraft.savedQuestions);
          setTitle(parsedDraft.savedTitle);
          toast.success("Questions generated successfully!", {
            autoClose: 3000,
          });
        } else if (Array.isArray(parsedDraft)) {
          setQuestions(parsedDraft);
          toast.success("Questions generated successfully!", {
            autoClose: 3000,
          });
        } else {
          console.error("No questions found in saved draft");
          toast.error("No questions found in saved draft.", {
            autoClose: 3000,
          });
        }
      } catch (error) {
        console.error(
          "Error loading generated questions from localStorage:",
          error
        );
        toast.error("Error loading generated questions.", { autoClose: 3000 });
      }
    }
  };

  const AutoGenModal = ({ isOpen, onClose, isGenerating }) => {
    const [formState, setFormState] = useState({
      topic: "",
      difficulty: "easy",
      tone: "professional",
      numQuestions: "5",
    });
    const [validationError, setValidationError] = useState("");

    // Reset form and errors when modal closes
    useEffect(() => {
      if (!isOpen) {
        setFormState({
          topic: "",
          difficulty: "easy",
          tone: "professional",
          numQuestions: "5",
        });
        setValidationError("");
      }
    }, [isOpen]);

    const handleInputChange = (e) => {
      const { name, value } = e.target;
      setFormState((prev) => ({
        ...prev,
        [name]: value,
      }));
      // Clear validation error when user starts typing
      if (name === "topic" && validationError) {
        setValidationError("");
      }
    };

    const handleSubmit = async (e) => {
      e.preventDefault();

      // Enhanced validation
      if (!formState.topic.trim()) {
        setValidationError("Please enter a topic");
        return;
      }

      if (formState.topic.length < 3) {
        setValidationError("Topic must be at least 3 characters long");
        return;
      }

      // Check rate limit
      const lastGeneration = localStorage.getItem(LAST_GENERATION_KEY);
      const now = Date.now();

      if (lastGeneration) {
        const timeElapsed = now - parseInt(lastGeneration);
        if (timeElapsed < COOLDOWN_PERIOD) {
          const remainingSeconds = Math.ceil(
            (COOLDOWN_PERIOD - timeElapsed) / 1000
          );
          toast.error(
            `Please wait ${remainingSeconds} seconds before generating again.`
          );
          return;
        }
      }

      setIsGenerating(true);
      toast.info("Generating questions...", {
        toastId: "generating",
        autoClose: false,
      });

      try {
        const genAI = new GoogleGenerativeAI(
          process.env.NEXT_PUBLIC_GEMINI_API_KEY
        );
        const model = genAI.getGenerativeModel({
          model: "tunedModels/triviabase-ai-7o7zd5w99tmz",
        });

        const prompt = `i need the complete JSON schema output only, alway include the "saved_title". Topic: ${formState.topic}, difficulty level: ${formState.difficulty}, number of questions: ${formState.numQuestions}, tone of voice: ${formState.tone}.`;

        const result = await model.generateContent(prompt);
        const responseText = result.response.text();

        // Store in localStorage and update UI
        localStorage.setItem(STORAGE_KEY, responseText);
        // Update last generation timestamp
        localStorage.setItem(LAST_GENERATION_KEY, now.toString());

        retrieveGeneratedQuestions();

        toast.dismiss("generating");
        toast.success("Questions generated successfully!", {
          toastId: "success",
        });
        onClose();
      } catch (error) {
        console.error("Error during auto-generation:", error);
        toast.dismiss("generating");
        toast.error(
          error.message || "Failed to generate questions. Please try again."
        );
      } finally {
        setIsGenerating(false);
      }
    };

    if (!isOpen) return null;

    return (
      <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4 animate-fadeIn">
        <div className="bg-white rounded-xl w-full max-w-md shadow-xl animate-slideUp">
          <div className="flex justify-between items-center p-4 border-b">
            <h2 className="text-xl font-semibold text-gray-800">
              Auto Generate Questions
            </h2>
            <button
              onClick={onClose}
              className="p-2 hover:bg-gray-100 rounded-full transition-colors"
              disabled={isGenerating}
            >
              <X size={20} className="text-gray-500" />
            </button>
          </div>

          <form onSubmit={handleSubmit} className="p-6 space-y-6">
            {/* Topic Input with validation */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Topic <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                name="topic"
                value={formState.topic}
                onChange={handleInputChange}
                className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors
                  ${validationError ? "border-red-500" : "border-gray-300"}`}
                placeholder="Enter quiz topic"
                disabled={isGenerating}
              />
              {validationError && (
                <p className="mt-1 text-sm text-red-500">{validationError}</p>
              )}
            </div>

            {/* Difficulty Select */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Difficulty Level
              </label>
              <select
                name="difficulty"
                value={formState.difficulty}
                onChange={handleInputChange}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                disabled={isGenerating}
              >
                <option value="easy">Easy</option>
                <option value="medium">Medium</option>
                <option value="hard">Hard</option>
                <option value="very hard">Expert Level</option>
              </select>
            </div>

            {/* Tone Select */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Tone of Voice
              </label>
              <select
                name="tone"
                value={formState.tone}
                onChange={handleInputChange}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                disabled={isGenerating}
              >
                <option value="professional">Professional</option>
                <option value="casual">Casual</option>
                <option value="friendly">Friendly</option>
                <option value="humorous">Humorous</option>
                <option value="educational">Educational</option>
              </select>
            </div>

            {/* Number of Questions */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Number of Questions
              </label>
              <select
                name="numQuestions"
                value={formState.numQuestions}
                onChange={handleInputChange}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                disabled={isGenerating}
              >
                <option value="5">5 Questions</option>
                <option value="10">10 Questions</option>
              </select>
            </div>

            <div className="flex gap-3 pt-6 border-t">
              <button
                type="button"
                onClick={onClose}
                className="flex-1 px-4 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors disabled:opacity-50"
                disabled={isGenerating}
              >
                Cancel
              </button>
              <button
                type="submit"
                className="flex-1 px-4 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                disabled={isGenerating}
              >
                {isGenerating ? (
                  <span className="flex items-center justify-center">
                    <svg
                      className="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                    >
                      <circle
                        className="opacity-25"
                        cx="12"
                        cy="12"
                        r="10"
                        stroke="currentColor"
                        strokeWidth="4"
                      ></circle>
                      <path
                        className="opacity-75"
                        fill="currentColor"
                        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                      ></path>
                    </svg>
                    Generating...
                  </span>
                ) : (
                  "Generate"
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    );
  };

  useEffect(() => {
    const savedDraft = localStorage.getItem(STORAGE_KEY);
    if (savedDraft) {
      try {
        const { savedTitle, savedQuestions } = JSON.parse(savedDraft);
        setTitle(savedTitle);
        setQuestions(savedQuestions);
      } catch (error) {
        console.error("Error loading draft from localStorage:", error);
        toast.error("Error loading saved draft.", { autoClose: 3000 });
      }
    }
  }, []);

  useEffect(() => {
    const saveDraft = () => {
      try {
        localStorage.setItem(
          STORAGE_KEY,
          JSON.stringify({
            savedTitle: title,
            savedQuestions: questions,
          })
        );
      } catch (error) {
        console.error("Error saving draft to localStorage:", error);
        toast.error("Error saving draft.", { autoClose: 3000 });
      }
    };
    // Only save if there's actual content
    if (
      title.trim() !== "" ||
      questions.some(
        (q) =>
          q.text.trim() !== "" || q.options.some((opt) => opt.trim() !== "")
      )
    ) {
      saveDraft();
    }
  }, [title, questions]);

  // Add a new question
  const addQuestion = () => {
    const newQuestion = {
      id: Math.max(...questions.map((q) => q.id), 0) + 1,
      text: "",
      options: ["", "", "", ""],
      correctAnswer: null,
    };
    setQuestions([...questions, newQuestion]);
    setActiveQuestion(newQuestion.id);
  };

  const toggleDropdown = () => {
    setIsDropdownOpen(!isDropdownOpen);
  };

  // Remove a question
  const removeQuestion = (id) => {
    if (questions.length === 1) {
      toast.error("Cannot delete the last question", { autoClose: 3000 });
      return;
    }

    const updatedQuestions = questions.filter((q) => q.id !== id);
    setQuestions(updatedQuestions);

    // If deleting active question, select the previous question or the first one
    if (activeQuestion === id) {
      const index = questions.findIndex((q) => q.id === id);
      const newActiveId = index > 0 ? questions[index - 1].id : questions[0].id;
      setActiveQuestion(newActiveId);
    }
  };

  // Update question text
  const updateQuestion = (id, field, value) => {
    setQuestions(
      questions.map((q) => (q.id === id ? { ...q, [field]: value } : q))
    );
  };

  // Update question options
  const updateOption = (questionId, optionIndex, value) => {
    setQuestions(
      questions.map((q) =>
        q.id === questionId
          ? {
              ...q,
              options: q.options.map((opt, index) =>
                index === optionIndex ? value : opt
              ),
            }
          : q
      )
    );
  };

  // Set the correct answer
  const setCorrectAnswer = (questionId, optionIndex) => {
    setQuestions(
      questions.map((q) =>
        q.id === questionId
          ? {
              ...q,
              correctAnswer: optionIndex,
            }
          : q
      )
    );
  };

  const isFormValid = () => {
    if (title.trim() === "") {
      toast.warn("Please enter a quiz title.", { autoClose: 3000 });
      return false;
    }
    for (const q of questions) {
      if (q.text.trim() === "") {
        toast.warn("Please complete all question fields.", { autoClose: 3000 });
        return false;
      }
      if (q.options.some((opt) => opt.trim() === "")) {
        toast.warn("Please complete all option fields for each question.", {
          autoClose: 3000,
        });
        return false;
      }
      if (q.correctAnswer === null) {
        toast.warn("Please select a correct answer for each question.", {
          autoClose: 3000,
        });
        return false;
      }
    }
    return true;
  };

  const canEnterPreview = () => {
    return questions.every(
      (q) =>
        q.text.trim() !== "" && // Ensure the question has text
        q.options.every((opt) => opt.trim() !== "") && // Ensure all options have text
        q.correctAnswer !== null // Ensure a correct answer is selected
    );
  };

  // Toggle between preview mode and edit mode
  const togglePreview = () => {
    if (canEnterPreview()) {
      setIsPreviewMode(!isPreviewMode);
    } else {
      toast.warn(
        "Please complete all questions, options, and select a correct answer before previewing.",
        { autoClose: 3000 }
      );
    }
  };

  // Save the quiz to Firebase with generated quiz code
  const saveQuizToFirebase = async () => {
    if (!isFormValid()) {
      return;
    }

    let storedWalletAddress;
    try {
      storedWalletAddress = account.address;
      if (!storedWalletAddress) {
        toast.error("Please connect your wallet before saving the quiz", {
          autoClose: 3000,
        });
        return;
      }
    } catch (error) {
      setLoading(false);
      toast.error("Please connect your wallet before saving the quiz", {
        autoClose: 3000,
      });
      return;
    }

    setLoading(true);

    // Generate the quiz code
    const quizCode = generateQuizCode();
    console.log(quizCode);

    const quizData = {
      title,
      questions,
      quizCode,
      walletAddress: storedWalletAddress,
      timestamp: Date.now(),
      game_start: false,
      quiz_checker: false,
    };

    // Define Firebase references for quiz data and user generated quizzes
    const quizcodeRef = ref(database, `paid_quizcode/${storedWalletAddress}`);
    const quizRef = ref(database, `paid_quizzes/${quizCode}`);
    const userGeneratedQuizRef = ref(
      database,
      `user_generated_quizzes/${storedWalletAddress}/${quizCode}`
    );

    try {
      // Save data to Firebase for both quiz data and user generated quizzes
      await Promise.all([
        set(quizRef, quizData),
        set(userGeneratedQuizRef, {
          quizCode,
          timestamp: Date.now(),
          walletAddress: storedWalletAddress,
        }),
        set(quizcodeRef, {
          quizCode,
          timestamp: Date.now(),
        }),
      ]);
      setLoading(false);
      router.push("./enter_mail");
      toast.success("Quiz saved successfully!", { autoClose: 3000 });
    } catch (error) {
      setLoading(false);
      console.error("Error saving quiz data:", error);
      toast.error("Error saving quiz. Check network and try again.", {
        autoClose: 3000,
      });
    }
  };

  // Add this new function to handle question selection
  const handleQuestionSelect = (id) => {
    const currentQuestion = questions.find((q) => q.id === activeQuestion);
    if (currentQuestion && !currentQuestion.text.trim()) {
      if (!confirm("Current question is empty. Switch anyway?")) {
        return;
      }
    }
    setActiveQuestion(id);
  };

  // Ensure activeQuestion is a valid index
  const activeQuestionIndex = questions.findIndex(
    (q) => q.id === activeQuestion
  );
